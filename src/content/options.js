/* global Preferences */

// Load Services using new import syntax - Access console & legacy preferences service
var { Services } = ChromeUtils.import('resource://gre/modules/Services.jsm');

// This is the fundamental design pattern change:  Preferences to find it loaded here 
// for the options.xul preferences dialog.  The preference array and objects map to
// the backend preference objects (existing legacy system).  preferencesBindings.js helper
// script loaded into the page context replaces the combined behavior of the overlay
// and legacy preferences systems.  Each preference is managed via the common preference
// id and equivalent XUL page preference identifier.  

// Add all relevant preferences into page with Preferences.addAll()
// Note: Both are current and default preferences are loaded for each object
// Loading the preferences here makes them available to the onLoad() event handler

Services.console.logStringMessage("Preferences 1: Loading options.xul preferences");

function onDialogAccept(e) {
	// Notice we are passing around the event object 'e'.  We need this to perform
	// changes on the default behavior (in this case closing the dialog AND saving the preferences)
	// With 'e'  we can use e.preventDefault() to NOT close or save the preferences

	// Do whatever you normally do for validation here, then decide to alert user
	// possibly reset to defaults or just don't close until a valid entry

	Services.console.logStringMessage("Preferences 1: onDialogAccept() - our accept handler");
 	// Show what the preferences objects look like - just for kicks, nothing functional
	// Services.console.logStringMessage(Preferences.getAll());
	console.log(Preferences.getAll());

	// Here we check the values (from the page -based preferences, not the Preferences System directly)
	// You could also grab the current values from the DOM ala getElementById...

	// Note: If instantApply is true or the dialog is not a type=child, the preferences will have been saved
	// If not we do validation and potentially 'cancel' the normal accept path using preventDefault()
	// which prevents closing the dialog.  stopPropagation() also prevents the event from bubbling
	// which will have the preferences saved.


	return true;
}

function getMail3Pane() {
	var w = Cc["@mozilla.org/appshell/window-mediator;1"]
		.getService(Ci.nsIWindowMediator)
		.getMostRecentWindow("mail:3pane");
	return w;
}

var PreferencesM;

var context = {};

function onLoad(e) {
	Services.console.logStringMessage("Preferences 1: onload event function");
	Services.scriptloader.loadSubScript("chrome://global/content/preferencesBindings.js", context, "UTF-8" /* The script's encoding */);
	console.debug('Options');
	let w = getMail3Pane();
	PreferencesM = w.Preferences;

	console.debug(PreferencesM);
	console.debug(Preferences);

	// Preferences._all = PreferencesM._all;
	console.debug('after all');
	console.debug(Preferences);

	// var test_cycles = Preferences.get("extensions.iet-ng-tests.test_cycles").value;
	// console.debug( test_cycles);

	// Grab the dialog element so we can play with it
	const dialog = document.getElementById("iet-ng-tests-dialog");

	Services.console.logStringMessage("Preferences 1: onload loaded preferences script");

	Preferences.addAll([

		{ id: "extensions.iet-ng-tests.test_cycles", type: "int" },
		{ id: "extensions.iet-ng-tests.test_fcount", type: "int" },
		{ id: "extensions.iet-ng-tests.test_mcount", type: "int" },
		{ id: "extensions.iet-ng-tests.test_msize", type: "int" },
		{ id: "extensions.iet-ng-tests.test_updatecycle", type: "int" },
		{ id: "extensions.iet-ng-tests.test_updatecount", type: "int" },
		{ id: "extensions.iet-ng-tests.test_pawaitcycle", type: "int" },
		{ id: "extensions.iet-ng-tests.test_usecfawait", type: "bool" },
		// { id: "extensions.iet-ng-tests.test_", type: "bool" },
		// { id: "extensions.iet-ng-tests.test_", type: "bool" },

	]);

	Preferences.updateAllElements();
	Services.console.logStringMessage("Preferences 1: onload loaded preferences ");
}

// The new preferences dialog paradigm uses standard event listeners for dialog events
// Use: 
// 'dialogaccept' event generated by the okay button (default button)
// 'dialogcancel' event generated by the cancel button 
// See documentation on modified dialog for more on events

document.addEventListener('dialogaccept', function (e) {
	Services.console.logStringMessage("Preferences 1: dialogaccept event handler");
	// Call our handler function - could be done here
	onDialogAccept(e);
	return false;
});

document.addEventListener('dialogcancel', function (e) {
	Services.console.logStringMessage("Preferences 1: dialogcancel event handler");
	return true;
});

window.addEventListener("load", function (e) { onLoad(e); }, false);
